/*
 * Slots pour comparer tous les progrès Vanilla
 */
void FRM_Principale::readJSONsVanilla(bool checked) {
    if (checked) {
    }
    ui->qcbFiltreOrigine->disconnect();
    ui->qcbFiltreTitre->disconnect();

    proxyModelFiltreConditionFaite->invalidate();
    proxyModelFiltreProgresFinis->invalidate();
    proxyModelFiltreTitre->invalidate();
    proxModelFiltreOrigine->invalidate();
    m_qsimProgresRealisation->clear();

    ui->qcbFiltreOrigine->clear();
    ui->qcbFiltreOrigine->addItem("");
    ui->qcbFiltreTitre->clear();
    ui->qcbFiltreTitre->addItem("");

    ui->qgbFiltres->setEnabled(false);
    ui->qgbOperations->setEnabled(false);
    ui->qaImprimerVue->setEnabled(false);

    QStringList qslFormatFichier;
    QString qsTitrePrecedent = "";
    qslFormatFichier << "*.json";

    ui->qcbFiltreOrigine->addItem("Minecraft Vanilla");
    ui->qcbFiltreTitre->addItem("----- Minecraft Vanilla -----");
    QVariantMap qvmJsonLang = ouvrirJson(m_qsFichierLang);
    /*
     * Tout stocké dans un QStringList
     */
    toutesLesTraductions(qvmJsonLang);

    QDirIterator qdiFichierProgres(m_qdDossierAdvancedments.path(), qslFormatFichier, QDir::Files, QDirIterator::Subdirectories);

    while (qdiFichierProgres.hasNext()) {
        QString qsJsonFile = qdiFichierProgres.next();
        QStringList qslCheminFichier = qsJsonFile.split("/");
        if (qslCheminFichier.at(2) != "recipes") {

            QFile qfJsonFile(qsJsonFile);
            if(!qfJsonFile.open(QIODevice::ReadOnly)){
                qDebug()<<"Failed to open "<< qsJsonFile;
                exit(1);
            }

            QTextStream file_text(&qfJsonFile);
            QString json_string;
            json_string = file_text.readAll();
            qfJsonFile.close();
            QByteArray json_bytes = json_string.toLocal8Bit();

            QJsonDocument json_doc = QJsonDocument::fromJson(json_bytes);

            if(json_doc.isNull()){
                qDebug()<<"Failed to create JSON doc.";
                exit(2);
            }
            if(!json_doc.isObject()){
                qDebug()<<"JSON is not an object.";
                exit(3);
            }

            QJsonObject json_obj = json_doc.object();

            if(json_obj.isEmpty()){
                qDebug()<<"JSON object is empty.";
                exit(4);
            }

            QVariantMap json_map = json_obj.toVariantMap();
            QMap<QString, QVariant> qmDisplay = json_map["display"].toMap();
            QMap<QString, QVariant> qmTitle = qmDisplay["title"].toMap();
            QMap<QString, QVariant> qmDescription = qmDisplay["description"].toMap();
            QMap<QString, QVariant> qmCriteres = json_map["criteria"].toMap();
            QJsonArray qjaConditionsTemp = json_map["requirements"].toJsonArray();
            QJsonArray qjaConditions = qjaConditionsTemp.at(0).toArray();
            // Si > 1 => OU (||)
            // Sinon  => ET (&&)
            int iNombreRequierements = qjaConditions.count();
            QString qsIdentifiant = qsJsonFile;
            QString qsTitre = qvmJsonLang[qmTitle["translate"].toString()].toString();
            QString qsTitreAvecDescription = "";
            QString qsDescription = qvmJsonLang[qmDescription["translate"].toString()].toString();
            qsIdentifiant.replace(m_qdDossierAdvancedments.path()+"/", "");
            qsIdentifiant = "minecraft:" + qsIdentifiant.split(".").first();

            if (qsTitre == "") {
                QStringList qslIdentifiant = qsIdentifiant.split("/");
                QString qsValeurDansLang = "minecraft." + qslIdentifiant.last();

                QMapIterator<QString, QVariant> qmiFichierLang(qvmJsonLang);
                while (qmiFichierLang.hasNext()) {
                    qmiFichierLang.next();
                    QString qsCle = qmiFichierLang.key();
                    if (qsCle.contains(qsValeurDansLang)) {
                        qsTitre = qmiFichierLang.value().toString();
                    }
                }
                if (qsTitre == "") {
                    QStringList qslTitre = qsIdentifiant.split("/").last().split("_");
                    for (int a = 0 ; a < qslTitre.count() ; a++) {
                        QString qsTitreTemp = qslTitre.at(a);
                        qsTitreTemp.replace(0, 1, qsTitreTemp.at(0).toUpper());
                        qsTitre += qsTitreTemp + " ";
                    }
                    qsTitre = qsTitre.trimmed();
                }
            }
            qsTitre.replace("’", "'");

            if (qsTitre != qsTitrePrecedent) {
                qsTitrePrecedent = qsTitre;
                ui->qcbFiltreTitre->addItem(qsTitrePrecedent);
            }

            bool bCriteresPersoExiste = m_qvmJsonProgresPerso[qsIdentifiant].isValid();
            bool bProgesFini;
            int iCritereFait = 0;
            QMap<QString, QVariant> qmIdentifiantPerso;
            QMap<QString, QVariant> qmCriteresPerso;
            QString qsDateRealisation;
            if (bCriteresPersoExiste) {
                qmIdentifiantPerso = m_qvmJsonProgresPerso[qsIdentifiant].toMap();
                bProgesFini = qmIdentifiantPerso.value("done").toBool();
                qmCriteresPerso = qmIdentifiantPerso["criteria"].toMap();
                iCritereFait = qmCriteresPerso.count();
            } else {
                bProgesFini = false;

            }
                QString qsProgresFini;
                int iCritereAFaire = qmCriteres.count();

                if (bProgesFini)
                    qsProgresFini = "oui";
                else
                    qsProgresFini = "non";

                QMapIterator<QString, QVariant> qmiCriteres(qmCriteres);
                while (qmiCriteres.hasNext()) {
                    qmiCriteres.next();
                    m_qlLigneProgres.clear();
                    QString qsCondition = qmiCriteres.key();
                    QString qsConditionSimple = qsCondition;
                    qsConditionSimple.replace(QRegExp("^.+:"), "");
                    QMap<QString, QVariant> qmCritere = qmCriteres[qsCondition].toMap();
                    QString qmTrigger = qmCritere["trigger"].toString();
                    QMap<QString, QVariant> qmConditions = qmCritere["conditions"].toMap();
                    QList<QString> qlsKeysMap = qmConditions.keys();
                    QDateTime qdtDateRealisation = QDateTime();
                    if (bCriteresPersoExiste) {
                        qsDateRealisation = qmCriteresPerso[qsCondition].toString();
                        qsDateRealisation = qsDateRealisation.left(qsDateRealisation.length()-6);
                        qdtDateRealisation = QDateTime::fromString(qsDateRealisation, "yyyy-MM-dd hh:mm:ss");
                    }

                    QStandardItem *qsiOrigine = new QStandardItem("Minecraft Vanilla");
                    QStandardItem *qsiTitre = new QStandardItem("");
                    if (qsDescription == "") {
                        qsiTitre->setText(qsTitre);
                        qsTitreAvecDescription = qsTitre;
                    } else {
                        qsiTitre->setText(qsTitre + " (" + qsDescription + ")");
                        qsTitreAvecDescription = qsTitre + " (" + qsDescription + ")";
                    }
                    qsiTitre->setData(qsJsonFile, Qt::UserRole);

                    QStandardItem *qsiProgreFini = new QStandardItem(qsProgresFini);
                    if (qsProgresFini == "oui") {
                        qsiTitre->setForeground(QBrush(Qt::darkGreen));
                    }
                    QStandardItem *qsiCondition = new QStandardItem("");

                    if (qsConditionSimple.contains("/")) {
                        QStringList qslConditionSansChemin = qsConditionSimple.split("/");
                        qsiCondition->setText(qslConditionSansChemin.last().split(".").first());
                        qsiCondition->setIcon(QIcon(qsConditionSimple));
                        qsiCondition->setToolTip("<img src=\"" + qsConditionSimple + "\" width=\"167\" height=\"100\">");
                    } else {
                        qsiCondition->setText(qsConditionSimple);
                    }

                    /*
                     * Rechercher la traduction
                     * Si trouvé : on la met
                     * Sinon     : on mets qsConditionSimple
                     */
                    int index = m_qslClesToutesLesTrads.indexOf(QRegExp(".+\\.minecraft(\\..+)?\\." + qsConditionSimple + "$"));
                    if (index != -1) {
                        qsiCondition->setText(m_qslToutesLesTrads.at(index));
                    }

                    // Si le progres n'est pas fait, on mets une couleur sur la condition
                    // on fonction si une suffit ou toutes
                    if (qsProgresFini == "non" && iNombreRequierements > 1) {
                        qsiCondition->setForeground(QBrush(Qt::blue));
                    } else if (qsProgresFini == "non" && iNombreRequierements == 1 && qjaConditionsTemp.count() > 1) {
                        qsiCondition->setForeground(QBrush(Qt::darkRed));
                    } else if (qsProgresFini == "non") {
                        qsiCondition->setForeground(QBrush(Qt::darkYellow));
                    }

                    QStandardItem *qsiConditionRemplie = new QStandardItem("");
                    QStandardItem *qsiDateRealisation = new QStandardItem("");

                    // On ajoute la colonne type (ET / OU) que l'on masquera pour filtrer
                    QStandardItem *qsiTypeCondition = new QStandardItem("");
                    if (iNombreRequierements > 1) {
                        qsiTypeCondition->setText("OU");
                    } else if (iNombreRequierements == 1 && qjaConditionsTemp.count() > 1) {
                        qsiTypeCondition->setText("ET");
                    } else {
                        qsiTypeCondition->setText("UNE");
                    }

                    if (bCriteresPersoExiste && (bProgesFini && iCritereFait <= iCritereAFaire)) {
                        if (qsDateRealisation != "") {
                            //qDebug() << "Minecraft Vanilla;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";oui;" + qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss");
                            qsiConditionRemplie->setText("oui");
                            //qsiDateRealisation->setText(qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss"));
                            qsiDateRealisation->setData(qdtDateRealisation, Qt::DisplayRole);
                            m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                            m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                        }
                    } else if (bCriteresPersoExiste) {
                        if (qsDateRealisation != "") {
                            //qDebug() << "Minecraft Vanilla;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";oui;" + qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss");
                            qsiConditionRemplie->setText("oui");
                            //qsiDateRealisation->setText(qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss"));
                            qsiDateRealisation->setData(qdtDateRealisation, Qt::DisplayRole);
                            m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                            m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                        } else {
                            //qDebug() << "Minecraft Vanilla;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";non;";
                            qsiConditionRemplie->setText("non");
                            m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                            m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                        }
                    } else {
                        //qDebug() << "Minecraft Vanilla;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";non;";
                        qsiConditionRemplie->setText("non");
                        m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                        m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                    }
                }
        }
    }

    if (!bTousLesProgres){
        QStringList qslHorizontalLabel;
        qslHorizontalLabel << "Origine" << "Titre" << "Progres Fini" << "Condition" << "Condition Faite" << "Date Fait" << "Type Condition";
        m_qsimProgresRealisation->setHorizontalHeaderLabels(qslHorizontalLabel);

        proxModelFiltreOrigine->setSourceModel(m_qsimProgresRealisation);
        proxyModelFiltreTitre->setSourceModel(proxModelFiltreOrigine);
        proxyModelFiltreProgresFinis->setSourceModel(proxyModelFiltreTitre);
        proxyModelFiltreConditionFaite->setSourceModel(proxyModelFiltreProgresFinis);
        proxyModelFiltreTypeCondition->setSourceModel(proxyModelFiltreConditionFaite);
        proxyModelFiltreDate->setSourceModel(proxyModelFiltreTypeCondition);

        ui->tableView->setModel(proxyModelFiltreDate);
        ui->tableView->resizeColumnsToContents();
        ui->tableView->hideColumn(6);

        connect(ui->qcbFiltreOrigine, SIGNAL(currentTextChanged(QString)), this, SLOT(filtreTableOrigine(QString)));
        connect(ui->qcbFiltreTitre, SIGNAL(currentTextChanged(QString)), this, SLOT(filtreTableTitre(QString)));

        ui->qgbFiltres->setEnabled(true);
        ui->qgbOperations->setEnabled(true);
        ui->qaImprimerVue->setEnabled(true);

        m_defaultCompleter->setModel(ui->qcbFiltreTitre->model());
        m_defaultCompleter->setCompletionMode(QCompleter::PopupCompletion);
        m_defaultCompleter->setCaseSensitivity(Qt::CaseSensitivity::CaseInsensitive);
        ui->qcbFiltreTitre->setCompleter(m_defaultCompleter);
    }
}

/*
 * Slots pour comparer tous les progrès BACAP
 */
void FRM_Principale::readJSONsBlazeandcave(bool checked) {
    if (checked) {
        qDebug() << checked;
    }
    if (!bTousLesProgres) {
        ui->qcbFiltreOrigine->disconnect();
        ui->qcbFiltreTitre->disconnect();

        proxyModelFiltreConditionFaite->invalidate();
        proxyModelFiltreProgresFinis->invalidate();
        proxyModelFiltreTitre->invalidate();
        proxModelFiltreOrigine->invalidate();
        m_qsimProgresRealisation->clear();

        ui->qcbFiltreOrigine->clear();
        ui->qcbFiltreOrigine->addItem("");
        ui->qcbFiltreTitre->clear();
        ui->qcbFiltreTitre->addItem("");

        ui->qgbFiltres->setEnabled(false);
        ui->qgbOperations->setEnabled(false);
        ui->qaImprimerVue->setEnabled(false);
    }

    QStringList qslFormatFichier;
    QString qsTitrePrecedent = "";
    bool bOuvertureJSON = true;
    qslFormatFichier << "*.json";
    QMessageBox qmbError;
    qmbError.setTextFormat(Qt::RichText);
    qmbError.setWindowIcon(QIcon(":/img/icons8_minecraft_logo_48px.png"));
    qmbError.setStandardButtons(QMessageBox::Ok);
    qmbError.setDefaultButton(QMessageBox::Ok);
    qmbError.setIcon(QMessageBox::Critical);
    QJsonParseError *error = new QJsonParseError();

    ui->qcbFiltreOrigine->addItem("Blaze and Cave");
    ui->qcbFiltreTitre->addItem("----- Blaze and Cave -----");
    if (bTousLesProgres)
        ui->qcbFiltreTitre->insertSeparator(ui->qcbFiltreTitre->count()-1);

    QVariantMap qvmJsonLangVanilla = ouvrirJson(m_qsFichierLang);
    /*
     * Tout stocké dans un QStringList
     */
    toutesLesTraductions(qvmJsonLangVanilla);

    QString qsJsonLang = "rcs/blazeandcave-fr_fr.json";
    QFile qfLangUs(qsJsonLang);
    if(!qfLangUs.open(QIODevice::ReadOnly)){
        qDebug()<<"Failed to open "<< qsJsonLang;
        exit(1);
    }

    QTextStream qtsLang(&qfLangUs);
    QString qsJsonLangUs;
    qsJsonLangUs = qtsLang.readAll();
    qsJsonLangUs = qsJsonLangUs.replace(QRegularExpression("#.+?\r\n"), "");
    qDebug() << qsJsonLangUs;
    qfLangUs.close();
    QByteArray qbaJsonLang = qsJsonLangUs.toLocal8Bit();

    QJsonDocument qjdJsonLang = QJsonDocument::fromJson(qbaJsonLang, error);

    if(qjdJsonLang.isNull()){
        qDebug()<<"Failed to create JSON doc.";
        qmbError.setText("Impossible de récupérer le contenu de <i>" + qsJsonLang + "<i>.");
        qmbError.setInformativeText("<strong>Le fichier ne sera pas traité...</strong>");
        qmbError.setDetailedText(error->errorString().replace(0, 1, error->errorString()[0].toUpper()));
        qmbError.exec();
        exit(2);
    }
    if(!qjdJsonLang.isObject()){
        qDebug()<<"JSON is not an object.";
        exit(3);
    }

    QJsonObject qjsJsonLang = qjdJsonLang.object();

    if(qjsJsonLang.isEmpty()){
        qDebug()<<"JSON object is empty.";
        exit(4);
    }

    QVariantMap qvmJsonLang = qjsJsonLang.toVariantMap();

    QDirIterator qdiFichierProgres(m_qdDossierAdvancementsBlazeAndCave.path(), qslFormatFichier, QDir::Files, QDirIterator::Subdirectories);

    qDebug() << "Origine;Titre;Progres Fini;Condition;Condition Faite;Date Fait";

    while (qdiFichierProgres.hasNext()) {
        QString qsJsonFile = qdiFichierProgres.next();
        qDebug() << qsJsonFile;
        QStringList qslCheminFichier = qsJsonFile.split("/");
        if (qslCheminFichier.indexOf(QRegExp(m_qsDossierAExclure)) == -1) {
            QFile qfJsonFile(qsJsonFile);
            if(!qfJsonFile.open(QIODevice::ReadOnly)){
                qDebug()<<"Failed to open "<< qsJsonFile;
                QMessageBox::critical(this, "Ouvrir JSON", "Impossible d'e récupérer le contenu d'ouvrir " + qsJsonFile + ".\n\n<strong>Le fichier ne sera pas traité...</strong>");
                bOuvertureJSON = false;
            }

            QTextStream file_text(&qfJsonFile);
            QString json_string;
            json_string = file_text.readAll();
            qfJsonFile.close();
            QByteArray json_bytes = json_string.toLocal8Bit();
            QJsonDocument json_doc = QJsonDocument::fromJson(json_bytes, error);

            if(json_doc.isNull() && bOuvertureJSON){
                QStringList qslJsonFile = qsJsonFile.split("/");
                QString qsFauxJsonFile = qslJsonFile.first() + "\\fake_Path\\" + qslJsonFile.last();

                qDebug()<<"Failed to create JSON doc." << qsJsonFile;

                qmbError.setText("Impossible de récupérer le contenu de <i>" + qsFauxJsonFile + "<i>.");
                qmbError.setInformativeText("<strong>Le fichier ne sera pas traité...</strong>");
                qmbError.setDetailedText(error->errorString().replace(0, 1, error->errorString()[0].toUpper()) + "\n\n" + json_string);
                qmbError.exec();
                bOuvertureJSON = false;
            }
            if(!json_doc.isObject() && bOuvertureJSON){
                qDebug()<<"JSON is not an object.";
                QMessageBox::critical(this, "Format JSON", "Le fichier JSON " + qsJsonFile + " n'a pas le bon format.\nLe fichier ne sera pas traité...");
                bOuvertureJSON = false;
            }

            QJsonObject json_obj = json_doc.object();

            if(json_obj.isEmpty() && bOuvertureJSON){
                qDebug()<<"JSON object is empty.";
                QMessageBox::critical(this, "JSON Vide", "Le fichier JSON " + qsJsonFile + " est vide.\nLe fichier ne sera pas traité...");
                bOuvertureJSON = false;
            }

            if (bOuvertureJSON) {
                QVariantMap json_map = json_obj.toVariantMap();
                QMap<QString, QVariant> qmDisplay = json_map["display"].toMap();
                QMap<QString, QVariant> qmTitle = qmDisplay["title"].toMap();
                QMap<QString, QVariant> qmDescription = qmDisplay["description"].toMap();
                QMap<QString, QVariant> qmCriteres = json_map["criteria"].toMap();
                QJsonArray qjaConditionsTemp = json_map["requirements"].toJsonArray();
                int iNombreRequierements;
                if (!qjaConditionsTemp.isEmpty()) {
                    QJsonArray qjaConditions = qjaConditionsTemp.at(0).toArray();
                    qjaConditionsTemp.at(1).isArray();
                    // Si > 1 => OU (||)
                    // Sinon  => ET (&&)
                    if (qjaConditionsTemp.at(1).isArray()) {
                        iNombreRequierements = 1;
                    } else {
                        iNombreRequierements = qjaConditions.count();
                    }
                } else {
                    iNombreRequierements = 1;
                }
                QString qsIdentifiant = qsJsonFile;
                QString qsTitre = qvmJsonLang[qmTitle["translate"].toString()].toString();
                // Parfois il n'y a pas de traduction...
                if (qsTitre == "") {
                    qsTitre = qmTitle["translate"].toString();
                }
                QString qsTitreAvecDescription = "";
                QString qsDescription = qvmJsonLang[qmDescription["translate"].toString()].toString();
                // Parfois il n'y a pas de traduction...
                if (qsDescription == "") {
                    qsDescription = qmDescription["translate"].toString();
                }
                qsIdentifiant.replace(m_qdDossierAdvancementsBlazeAndCave.path()+"/", "");
                qsIdentifiant = "blazeandcave:" + qsIdentifiant.split(".").first();

                if (qsTitre == "") {
                    QStringList qslTitre = qsIdentifiant.split("/").last().split("_");
                    for (int a = 0 ; a < qslTitre.count() ; a++) {
                        QString qsTitreTemp = qslTitre.at(a);
                        qsTitreTemp.replace(0, 1, qsTitreTemp.at(0).toUpper());
                        qsTitre += qsTitreTemp + " ";
                    }
                    qsTitre = qsTitre.trimmed();
                }

                qsTitre.replace("’", "'");

                if (qsTitre != qsTitrePrecedent) {
                    qsTitrePrecedent = qsTitre;
                    ui->qcbFiltreTitre->addItem(qsTitrePrecedent);
                }

                bool bCriteresPersoExiste = m_qvmJsonProgresPerso[qsIdentifiant].isValid();
                bool bProgesFini;
                int iCritereFait = 0;
                QMap<QString, QVariant> qmIdentifiantPerso;
                QMap<QString, QVariant> qmCriteresPerso;
                QString qsDateRealisation;
                if (bCriteresPersoExiste) {
                    qmIdentifiantPerso = m_qvmJsonProgresPerso[qsIdentifiant].toMap();
                    bProgesFini = qmIdentifiantPerso.value("done").toBool();
                    qmCriteresPerso = qmIdentifiantPerso["criteria"].toMap();
                    iCritereFait = qmCriteresPerso.count();
                } else {
                    bProgesFini = false;

                }

                QString qsProgresFini;
                int iCritereAFaire = qmCriteres.count();
                qDebug() << "Nbr Criteres : " << iCritereAFaire;

                if (bProgesFini)
                    qsProgresFini = "oui";
                else
                    qsProgresFini = "non";

                QMapIterator<QString, QVariant> qmiCriteres(qmCriteres);
                while (qmiCriteres.hasNext()) {
                    qmiCriteres.next();
                    m_qlLigneProgres.clear();
                    QString qsCondition = qmiCriteres.key();
                    QString qsConditionSimple = qsCondition;
                    qsConditionSimple.replace(QRegExp("^.+:"), "");
                    QMap<QString, QVariant> qmCritere = qmCriteres[qsCondition].toMap();
                    QString qmTrigger = qmCritere["trigger"].toString();
                    QMap<QString, QVariant> qmConditions = qmCritere["conditions"].toMap();
                    QList<QString> qlsKeysMap = qmConditions.keys();
                    QDateTime qdtDateRealisation = QDateTime();
                    if (bCriteresPersoExiste) {
                        qsDateRealisation = qmCriteresPerso[qsCondition].toString();
                        qsDateRealisation = qsDateRealisation.left(qsDateRealisation.length()-6);
                        qdtDateRealisation = QDateTime::fromString(qsDateRealisation, "yyyy-MM-dd hh:mm:ss");
                    }

                    QStandardItem *qsiOrigine = new QStandardItem("Blaze and Cave");
                    QStandardItem *qsiTitre = new QStandardItem("");
                    if (qsDescription == "") {
                        qsiTitre->setText(qsTitre);
                        qsTitreAvecDescription = qsTitre;
                    } else {
                        qsiTitre->setText(qsTitre + " (" + qsDescription + ")");
                        qsTitreAvecDescription = qsTitre + " (" + qsDescription + ")";
                    }
                    qsiTitre->setData(qsJsonFile, Qt::UserRole);

                    if (qsProgresFini == "oui") {
                        qsiTitre->setForeground(QBrush(Qt::darkGreen));
                    }

                    QStandardItem *qsiProgreFini = new QStandardItem(qsProgresFini);
                    QStandardItem *qsiCondition = new QStandardItem(qsConditionSimple);
                    // Si le progres n'est pas fait, on mets une couleur sur la condition
                    // on fonction si une suffit ou toutes
                    if (iCritereAFaire == 1) {
                        qsiCondition->setForeground(QBrush(Qt::darkYellow));
                    } else {
                        if (qsProgresFini == "non" && iNombreRequierements > 1) {
                           qsiCondition->setForeground(QBrush(Qt::blue));
                        } else if (qsProgresFini == "non" && iNombreRequierements == 1) {
                           qsiCondition->setForeground(QBrush(Qt::darkRed));
                        } else {
                            qsiCondition->setForeground(QBrush(Qt::darkYellow));
                        }
                    }

                    /*
                     * Rechercher la traduction
                     * Si trouvé : on la met
                     * Sinon     : on mets qsConditionSimple
                     */
                    int index = m_qslClesToutesLesTrads.indexOf(QRegExp(".+\\.minecraft(\\..+)?\\." + qsConditionSimple + "$"));
                    if (index != -1) {
                        //qDebug() << "Trad" << qslClesToutesLesTrads.at(index) << "=>" << qslToutesLesTrads.at(index) << "(" + qsConditionSimple + ")";
                        qsiCondition->setText(m_qslToutesLesTrads.at(index));
                    }

                    QStandardItem *qsiConditionRemplie = new QStandardItem("");
                    QStandardItem *qsiDateRealisation = new QStandardItem("");
                    // On ajoute la colonne type (ET / OU) que l'on masquera pour filtrer
                    QStandardItem *qsiTypeCondition = new QStandardItem("");
                    if (iCritereAFaire == 1) {
                        qsiTypeCondition->setText("UNE");
                    } else {
                        if (iNombreRequierements > 1) {
                            qsiTypeCondition->setText("OU");
                        } else if (iNombreRequierements == 1) {
                            qsiTypeCondition->setText("ET");
                        } else {
                            qsiTypeCondition->setText("UNE");
                        }
                    }

                    QDateTime test(QDateTime::currentDateTime());

                    if (bCriteresPersoExiste && (bProgesFini && iCritereFait <= iCritereAFaire)) {
                        if (qsDateRealisation != "") {
                            qDebug() << "Blaze and Cave;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";oui;" + qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss");
                            qsiConditionRemplie->setText("oui");
                            //qsiDateRealisation->setText(qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss"));
                            qsiDateRealisation->setData(qdtDateRealisation, Qt::DisplayRole);
                            m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                            m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                        }
                    } else if (bCriteresPersoExiste) {
                        if (qsDateRealisation != "") {
                            qDebug() << "Blaze and Cave;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";oui;" + qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss");
                            qsiConditionRemplie->setText("oui");
                            //qsiDateRealisation->setText(qdtDateRealisation.toString("dd/MM/yyyy à hh:mm:ss"));
                            qsiDateRealisation->setData(qdtDateRealisation, Qt::DisplayRole);
                            m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                            m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                        } else {
                            qDebug() << "Blaze and Cave;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";non;";
                            qsiConditionRemplie->setText("non");
                            m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                            m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                        }
                    } else {
                        qDebug() << "Blaze and Cave;" + qsTitreAvecDescription + ";" + qsProgresFini + ";" + qsCondition + ";non;";
                        qsiConditionRemplie->setText("non");
                        m_qlLigneProgres << qsiOrigine << qsiTitre << qsiProgreFini << qsiCondition << qsiConditionRemplie << qsiDateRealisation << qsiTypeCondition;
                        m_qsimProgresRealisation->appendRow(m_qlLigneProgres);
                    }
                }
            }

        }
    }

    if (!bTousLesProgres){
        QStringList qslHorizontalLabel;
        qslHorizontalLabel << "Origine" << "Titre" << "Progres Fini" << "Condition" << "Condition Faite" << "Date Fait" << "Type Condition";
        m_qsimProgresRealisation->setHorizontalHeaderLabels(qslHorizontalLabel);

        proxModelFiltreOrigine->setSourceModel(m_qsimProgresRealisation);
        proxyModelFiltreTitre->setSourceModel(proxModelFiltreOrigine);
        proxyModelFiltreProgresFinis->setSourceModel(proxyModelFiltreTitre);
        proxyModelFiltreConditionFaite->setSourceModel(proxyModelFiltreProgresFinis);
        proxyModelFiltreTypeCondition->setSourceModel(proxyModelFiltreConditionFaite);
        proxyModelFiltreDate->setSourceModel(proxyModelFiltreTypeCondition);

        ui->tableView->setModel(proxyModelFiltreDate);
        ui->tableView->resizeColumnsToContents();
        ui->tableView->hideColumn(6);

        connect(ui->qcbFiltreOrigine, SIGNAL(currentTextChanged(QString)), this, SLOT(filtreTableOrigine(QString)));
        connect(ui->qcbFiltreTitre, SIGNAL(currentTextChanged(QString)), this, SLOT(filtreTableTitre(QString)));

        ui->qgbFiltres->setEnabled(true);
        ui->qgbOperations->setEnabled(true);
        ui->qaImprimerVue->setEnabled(true);

        m_defaultCompleter->setModel(ui->qcbFiltreTitre->model());
        m_defaultCompleter->setCompletionMode(QCompleter::PopupCompletion);
        m_defaultCompleter->setCaseSensitivity(Qt::CaseSensitivity::CaseInsensitive);
        ui->qcbFiltreTitre->setCompleter(m_defaultCompleter);
    }
}

/*
 * Slots pour comparer tous les progrès (Vanilla + BCAP)
 */
void FRM_Principale::readAllJsons(bool checked) {
    if (checked) {
        qDebug() << checked;
    }
    bTousLesProgres = true;

    // Vanilla
    readJSONsVanilla(true);

    //Blaze And Cave
    readJSONsBlazeandcave(true);

    // Connection !
    QStringList qslHorizontalLabel;
    qslHorizontalLabel << "Origine" << "Titre" << "Progres Fini" << "Condition" << "Condition Faite" << "Date Fait" << "Type Condition";
    m_qsimProgresRealisation->setHorizontalHeaderLabels(qslHorizontalLabel);

    proxModelFiltreOrigine->setSourceModel(m_qsimProgresRealisation);
    proxyModelFiltreTitre->setSourceModel(proxModelFiltreOrigine);
    proxyModelFiltreProgresFinis->setSourceModel(proxyModelFiltreTitre);
    proxyModelFiltreConditionFaite->setSourceModel(proxyModelFiltreProgresFinis);
    proxyModelFiltreTypeCondition->setSourceModel(proxyModelFiltreConditionFaite);
    proxyModelFiltreDate->setSourceModel(proxyModelFiltreTypeCondition);

    ui->tableView->setModel(proxyModelFiltreDate);
    ui->tableView->resizeColumnsToContents();
    ui->tableView->hideColumn(6);

    connect(ui->qcbFiltreOrigine, SIGNAL(currentTextChanged(QString)), this, SLOT(filtreTableOrigine(QString)));
    connect(ui->qcbFiltreTitre, SIGNAL(currentTextChanged(QString)), this, SLOT(filtreTableTitre(QString)));

    ui->qgbFiltres->setEnabled(true);
    ui->qgbOperations->setEnabled(true);
    ui->qaImprimerVue->setEnabled(true);

    m_defaultCompleter->setModel(ui->qcbFiltreTitre->model());
    m_defaultCompleter->setCompletionMode(QCompleter::PopupCompletion);
    m_defaultCompleter->setCaseSensitivity(Qt::CaseSensitivity::CaseInsensitive);
    ui->qcbFiltreTitre->setCompleter(m_defaultCompleter);

    bTousLesProgres = false;
}
